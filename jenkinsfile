#!/usr/bin/env groovy
pipeline {
    agent any

    environment {
        ECR_URI= '368772107083.dkr.ecr.us-east-2.amazonaws.com/kalibra'
        REPOSITORY_URI= 'https://github.com/anuroop32/kalibra-final.git'
        DATE = new Date().format('yy.M')
        TAG = "${DATE}.${BUILD_NUMBER}"
        REGION= 'us-east-2'
        BACKEND_API_ENDPOINT= 'https://preprod.kalibra.app/api/'
        DEBUG_MODE= false
        AWS_ECS_SERVICE = 'test-cluster'
        AWS_ECS_TASK_DEFINITION = 'test-cluster'
        AWS_ECR_URL= '368772107083.dkr.ecr.us-east-2.amazonaws.com/kalibra'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_EXECUTION_ROL = 'arn:aws:iam::368772107083:role/ecsTaskExecutionRole'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_TASK_DEFINITION_PATH = './ecs/container-definition-update-image.json'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'office-test'
        AWS_ECR_REGION = 'us-east-2'
        CLUSTER = 'office-test'
        AWS_REGION = 'us-east-2'
        SERVICE_NAME = 'test-cluster'
        SERVICE = 'test-cluster'
        AWS_PROFILE = 'default'
        FAMILY = 'linux'
        BUILD_NUMBER = '1'
        WORKSPACE = 'test'
        
    }

    stages {
        stage("Prepare") {
            steps {
                 echo "Logging in....."
                 sh "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 368772107083.dkr.ecr.us-east-2.amazonaws.com"
                 echo "Successfully Logged in..."
                
            }
        }

        stage("Build") {
            steps {
                sh "docker build -t ${ECR_URI}:latest ."
                echo "Build Complete"
                
            }
        }

        stage("Post Build") {
            steps {
                echo "Pushing into ECR"
                sh "docker push $ECR_URI:latest"
                echo "Push Complete"
            }
        }

 
stage('Deploy in ECS') {
   steps {
      script {
        sh ("/usr/local/bin/aws ecs register-task-definition --region ${AWS_ECR_REGION} --family ${AWS_ECS_TASK_DEFINITION} --execution-role-arn ${AWS_ECS_EXECUTION_ROL} --requires-compatibilities ${AWS_ECS_COMPATIBILITY} --network-mode ${AWS_ECS_NETWORK_MODE} --cpu ${AWS_ECS_CPU} --memory ${AWS_ECS_MEMORY} --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}")
        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
        sh ("/usr/local/bin/aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskRevision}")
      }
    }
  }
}
      }          
